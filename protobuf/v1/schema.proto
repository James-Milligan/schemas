syntax = "proto3";

package schema.v1;

option go_package = "schema/service/v1";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// boolean 
message ResolveBooleanRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
    bool default_value = 3;
}
message ResolveBooleanResponse {
    bool value = 1;
    string reason = 2;
    string variant = 3;
}

// string
message ResolveStringRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
    string default_value = 3;
}
message ResolveStringResponse {
    string value = 1;
    string reason = 2;
    string variant = 3;
}

// number
message ResolveNumberRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
    float default_value = 3;
}
message ResolveNumberResponse {
    float value = 1;
    string reason = 2;
    string variant = 3;
}

// object
message ResolveObjectRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
    google.protobuf.Struct default_value = 3;
}
message ResolveObjectResponse {
    google.protobuf.Struct value = 1;
    string reason = 2;
    string variant = 3;
}

// service
service Service {
    rpc ResolveBoolean(ResolveBooleanRequest) returns (ResolveBooleanResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/boolean"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Resolve boolean value for flagKey";
            responses: {
                key: "200"
                value: {
                    description: "OK"
                    schema: {
                        example: '{"flag_key":true,"reason":"","variant":""}';
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Invalid flag resolution request";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "404"
                value: {
                    description: "Flag not found";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "500"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "default"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
        };
    }
    rpc ResolveString(ResolveStringRequest) returns (ResolveStringResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/string"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Resolve string value for flagKey";
            responses: {
                key: "200"
                value: {
                    description: "OK"
                    schema: {
                        example: '{"flag_key":"foo","reason":"","variant":""}';
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Invalid flag resolution request";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "404"
                value: {
                    description: "Flag not found";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "500"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "default"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
        };
    }
    rpc ResolveNumber(ResolveNumberRequest) returns (ResolveNumberResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/number"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Resolve number value for flagKey";
            responses: {
                key: "200"
                value: {
                    description: "OK"
                    schema: {
                        example: '{"flag_key":0.1234,"reason":"","variant":""}';
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Invalid flag resolution request";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "404"
                value: {
                    description: "Flag not found";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "500"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "default"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
        };
    }
    rpc ResolveObject(ResolveObjectRequest) returns (ResolveObjectResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/object"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Resolve object value for flagKey";
            responses: {
                key: "200"
                value: {
                    description: "OK"
                    schema: {
                        example: '{"flag_key":{"foo":"bar"},"reason":"","variant":""}';
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Invalid flag resolution request";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "404"
                value: {
                    description: "Flag not found";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "500"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
            responses: {
                key: "default"
                value: {
                    description: "Unhandled error during flag evaluation";
                    schema: {
                        example: "null";
                    }
                };
            }
        };
    }
}